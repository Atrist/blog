(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{804:function(s,t,a){"use strict";a.r(t);var n=a(5),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[s._v("#")]),s._v(" 参考资料")]),s._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://leetcode-cn.com/leetbook/detail/top-interview-questions-easy/",target:"_blank",rel:"noopener noreferrer"}},[s._v("leetcode 初级算法"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://leetcode-cn.com/problems/power-of-three/description/",target:"_blank",rel:"noopener noreferrer"}},[s._v("3的幂"),a("OutboundLink")],1)])]),s._v(" "),a("h2",{attrs:{id:"_3的幂"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3的幂"}},[s._v("#")]),s._v(" 3的幂")]),s._v(" "),a("p",[s._v("给定一个整数，写一个函数来判断它是否是 3 的幂次方。如果是，返回 "),a("code",[s._v("true")]),s._v(" ；否则，返回 "),a("code",[s._v("false")]),s._v(" 。")]),s._v(" "),a("p",[s._v("整数 "),a("code",[s._v("n")]),s._v(" 是 "),a("code",[s._v("3")]),s._v(" 的幂次方需满足：存在整数 "),a("code",[s._v("x")]),s._v(" 使得 $n == 3^x$")]),s._v(" "),a("h2",{attrs:{id:"解决方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决方法"}},[s._v("#")]),s._v(" 解决方法：")]),s._v(" "),a("p",[s._v("在本文中，我们将探讨加速简单计算的方法，以及为什么在实践中有用。")]),s._v(" "),a("h2",{attrs:{id:"方法一-循环迭代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法一-循环迭代"}},[s._v("#")]),s._v(" 方法一：循环迭代")]),s._v(" "),a("p",[s._v("找出数字 "),a("code",[s._v("n")]),s._v(" 是否是数字 "),a("code",[s._v("b")]),s._v(" 的幂的一个简单方法是，"),a("code",[s._v("n%3")]),s._v(" 只要余数为 "),a("code",[s._v("0")]),s._v("，就一直将 "),a("code",[s._v("n")]),s._v(" 除以 "),a("code",[s._v("b")]),s._v("。")]),s._v(" "),a("p",[s._v("$$\\begin{aligned} n &= b^x \\ n &= b \\times b \\times \\ldots \\times b \\end{aligned}$$")]),s._v(" "),a("p",[s._v("因此，应该可以将 "),a("code",[s._v("n")]),s._v(" 除以 "),a("code",[s._v("b")]),s._v(" x 次，每次都有 0 的余数，最终结果是 1。")]),s._v(" "),a("h3",{attrs:{id:"代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[s._v("#")]),s._v(" 代码")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * @param {number} n\n * @return {boolean}\n */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("isPowerOfThree")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v("  n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("注意我们需要一个警卫来检查那个 "),a("code",[s._v("n！=0")]),s._v("，否则 while 循环将永远不会结束。对于负数，该算法没有意义，因此我们也将包括该保护。")]),s._v(" "),a("h3",{attrs:{id:"复杂度分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复杂度分析"}},[s._v("#")]),s._v(" 复杂度分析")]),s._v(" "),a("ul",[a("li",[s._v("时间复杂度：$O(\\log_b(n))$，在我们的例子中是 $O(\\log n)$。除数是用对数表示的。")]),s._v(" "),a("li",[s._v("空间复杂度：O(1)，没有使用额外的空间。")])]),s._v(" "),a("h2",{attrs:{id:"方法二-基准转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法二-基准转换"}},[s._v("#")]),s._v(" 方法二：基准转换")]),s._v(" "),a("p",[s._v("在基数 10 中，10 的所有幂都从数字 1 开始，然后只跟 0（例如10、100、1000）。其他基地及其各自的权力也是如此。例如，在基数 2 中，$10 "),a("em",[s._v("2$、$100 "),a("em",[s._v("2$和 $1000 "),a("em",[s._v("2$分别表示为 $2")]),s._v("{10}$, $4")]),s._v("{10}$和 $8")]),s._v("{10}$。因此，如果我们把我们的数转换成基3，并且表示形式是 100…0，那么这个数就是3的幂。")]),s._v(" "),a("h3",{attrs:{id:"证明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#证明"}},[s._v("#")]),s._v(" 证明 ：")]),s._v(" "),a("p",[s._v("给定以 3 为底的数字表示为数组 "),a("code",[s._v("s")]),s._v("，第 0 位开始为有效数字，从 3 为底转换为 10 为底的公式为：")]),s._v(" "),a("p",[s._v("$$\\sum_{i=0}^{len(s) - 1} s[i] * 3^{i}$$")]),s._v(" "),a("p",[s._v("因此，只有一个数字 1，其余的都是 0，这意味着这个数字是 3 的幂。")]),s._v(" "),a("h3",{attrs:{id:"实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[s._v("#")]),s._v(" 实现：")]),s._v(" "),a("ul",[a("li",[s._v("我们所要做的就是将数字转换为以3为底的基数 ，并检查它是否为前导1，后跟所有 0。")])]),s._v(" "),a("h3",{attrs:{id:"代码-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码-2"}},[s._v("#")]),s._v(" 代码")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * @param {number} n\n * @return {boolean}\n */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("isPowerOfThree")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("$"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h3",{attrs:{id:"复杂度分析-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复杂度分析-2"}},[s._v("#")]),s._v(" 复杂度分析")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("时间复杂度：$O(\\log_3n)$")]),s._v(" "),a("ul",[a("li",[s._v("假设：\n"),a("ul",[a("li",[a("code",[s._v("Integer.toString()")]),s._v(" - 基转换通常是作为一个重复的除法来实现的。复杂性应该类似于我们的方法 $1:O（\\ log_3n）$的复杂性。")]),s._v(" "),a("li",[a("code",[s._v("String.matches()")]),s._v(" - 方法迭代整个字符串。"),a("code",[s._v("n")]),s._v(" 以 3 为基数表示的位数是$O（\\log_3n）$。")])])])])]),s._v(" "),a("li",[a("p",[s._v("空间复杂度：$O(\\log_3n)$。我们使用两个附加变量。")]),s._v(" "),a("ul",[a("li",[s._v("以 3 为基数表示数字的字符串（大小为 $\\log_3n$")]),s._v(" "),a("li",[s._v("正则表达式的字符串（常量大小）")])])])]),s._v(" "),a("h2",{attrs:{id:"方法三-运算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法三-运算法"}},[s._v("#")]),s._v(" 方法三：运算法")]),s._v(" "),a("p",[s._v("我们可以用下面的数学公式")]),s._v(" "),a("p",[s._v("$$n = 3^i \\ i = \\ log_3(n) \\ i = \\frac{\\ log_b(n)}{\\ log_b(3)}$$")]),s._v(" "),a("p",[s._v("若 "),a("code",[s._v("n")]),s._v(" 是 "),a("code",[s._v("3")]),s._v(" 的幂则 "),a("code",[s._v("i")]),s._v(" 是整数。在 Java 中，我们通过取小数部分（利用 "),a("code",[s._v("% 1")]),s._v("）来检查数字是否是整数，并检查它是否是 "),a("code",[s._v("0")]),s._v("。")]),s._v(" "),a("h3",{attrs:{id:"代码-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码-3"}},[s._v("#")]),s._v(" 代码")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * @param {number} n\n * @return {boolean}\n */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("isPowerOfThree")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h3",{attrs:{id:"复杂度分析-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复杂度分析-3"}},[s._v("#")]),s._v(" 复杂度分析")]),s._v(" "),a("ul",[a("li",[s._v("时间复杂度：Unknown。这里主要消耗时间的运算是 Math.log，它限制了我们算法的时间复杂性。实现依赖于我们使用的语言和编译器 。")]),s._v(" "),a("li",[s._v("空间复杂度： O(1)，我们没有使用任何额外的内存。")])]),s._v(" "),a("h2",{attrs:{id:"方法四-整数限制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法四-整数限制"}},[s._v("#")]),s._v(" 方法四：整数限制")]),s._v(" "),a("p",[s._v("一个重要的信息可以从函数名中推导出来。")]),s._v(" "),a("p",[s._v("我们可以看出 n 的类型是 int。在 Java 中说明了该变量是四个字节，他的最大值为 2147483647。有三种方法可以计算出该最大值。")]),s._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"http://stackoverflow.com/questions/15004944/max-value-of-integer",target:"_blank",rel:"noopener noreferrer"}},[s._v("Google"),a("OutboundLink")],1)]),s._v(" "),a("li",[s._v("System.out.println(Integer.MAX_VALUE);")]),s._v(" "),a("li",[s._v("$MaxInt = \\frac{ 2^{32} }{2} - 1$, 因为我们使用 32 位来表示数字，所以范围的一半用于负数，0 是正数的一部分。")])]),s._v(" "),a("p",[s._v("知道了 n 的限制，我们现在可以推断出 n 的最大值，也就是 3 的幂，是 "),a("strong",[s._v("1162261467")]),s._v("。我们计算如下：")]),s._v(" "),a("p",[s._v("$$3^{\\lfloor{}\\log_3{MaxInt}\\rfloor{}} = 3^{\\lfloor{}19.56\\rfloor{}} = 3^{19} = 1162261467$$")]),s._v(" "),a("p",[s._v("因此，我们应该返回 "),a("code",[s._v("true")]),s._v(" 的 n 的可能值是 $3^0$，$3^1$ …$3 ^ {19}$\n。因为 3 是质数，所以 $3^{19}$的除数只有 $3^0$，$3^13$…$3 ^{19}$ 因此我们只需要将 $3^{19}$除以 n。若余数为 0 意味着 n 是 $3^{19}$的除数，因此是 3 的幂。")]),s._v(" "),a("h3",{attrs:{id:"代码-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码-4"}},[s._v("#")]),s._v(" 代码")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * @param {number} n\n * @return {boolean}\n */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("isPowerOfThree")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v("   n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1162261467")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h3",{attrs:{id:"复杂度分析-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复杂度分析-4"}},[s._v("#")]),s._v(" 复杂度分析")]),s._v(" "),a("ul",[a("li",[s._v("时间复杂度：O(1)。我们只做了一次操作。")]),s._v(" "),a("li",[s._v("空间复杂度： O(1)，没有使用额外空间。")])]),s._v(" "),a("h3",{attrs:{id:"结论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结论"}},[s._v("#")]),s._v(" 结论 :")]),s._v(" "),a("p",[s._v("像这样的简单优化似乎可以忽略不计，但历史上，当计算能力成为一个问题时，它允许某些计算机程序（如Quake 3）成为可能。")])])}),[],!1,null,null,null);t.default=e.exports}}]);